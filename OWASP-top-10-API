# OWASP Top 10 for API Security (2023)

This document summarizes the OWASP Top 10 API Security risks with definitions and recommended mitigations.

| **#** | **Risk** | **Definition / Description** | **Recommendations / Mitigations** |
|-------|----------|-----------------------------|-----------------------------------|
| **API1:2023** | Broken Object Level Authorization (BOLA) | API endpoints exposing object identifiers can allow attackers to access or modify data of other users if authorization checks are missing or weak. | ‚Ä¢ Enforce proper object-level authorization checks on every API request<br>‚Ä¢ Use user-specific resource filtering<br>‚Ä¢ Avoid relying only on obfuscation of IDs |
| **API2:2023** | Broken Authentication | Authentication mechanisms are implemented incorrectly or inconsistently, allowing attackers to compromise authentication tokens or credentials. | ‚Ä¢ Use industry-standard authentication protocols (OAuth 2.0, OpenID Connect)<br>‚Ä¢ Implement secure password storage and token handling<br>‚Ä¢ Enforce MFA for sensitive actions |
| **API3:2023** | Broken Object Property Level Authorization | Attackers can modify or view properties they shouldn‚Äôt because property-level access control is missing. | ‚Ä¢ Validate and enforce property-level access on both read and write operations<br>‚Ä¢ Apply allowlists for updatable properties<br>‚Ä¢ Avoid mass assignment vulnerabilities |
| **API4:2023** | Unrestricted Resource Consumption | APIs can be abused to consume excessive resources (bandwidth, CPU, storage), leading to DoS. | ‚Ä¢ Apply rate limiting and quotas per user/IP/token<br>‚Ä¢ Set timeouts and size limits on requests<br>‚Ä¢ Monitor usage patterns and throttle suspicious activity |
| **API5:2023** | Broken Function Level Authorization | Different API functions (e.g., admin vs. user) aren‚Äôt properly segregated, allowing attackers to escalate privileges. | ‚Ä¢ Enforce function-level authorization for each endpoint<br>‚Ä¢ Apply ‚Äúleast privilege‚Äù to roles<br>‚Ä¢ Avoid exposing admin endpoints publicly |
| **API6:2023** | Unrestricted Access to Sensitive Business Flows | Automated attacks can exploit business flows (e.g., shopping cart checkout) to cause fraud or abuse if no anti-automation or rate controls exist. | ‚Ä¢ Identify sensitive business flows and apply bot detection<br>‚Ä¢ Add user behavior anomaly detection<br>‚Ä¢ Rate limit critical workflows |
| **API7:2023** | Server Side Request Forgery (SSRF) | API endpoints fetching remote resources can be exploited to access internal services or data. | ‚Ä¢ Validate and sanitize all URLs fetched by the server<br>‚Ä¢ Use allowlists for destination hosts<br>‚Ä¢ Disable redirects and sensitive metadata endpoints (IMDS) |
| **API8:2023** | Security Misconfiguration | Default or weak configurations expose APIs to attackers (debug enabled, verbose error messages, CORS misconfigs). | ‚Ä¢ Harden API server configurations and disable unnecessary features<br>‚Ä¢ Minimize error details in responses<br>‚Ä¢ Regularly review CORS and HTTP headers |
| **API9:2023** | Improper Inventory Management | Organizations often don‚Äôt maintain an up-to-date inventory of API endpoints, leading to ‚Äúshadow‚Äù or ‚Äúzombie‚Äù APIs. | ‚Ä¢ Maintain a complete API inventory with versioning<br>‚Ä¢ Decommission or secure unused endpoints<br>‚Ä¢ Use API gateways and automated discovery tools |
| **API10:2023** | Unsafe Consumption of APIs | Trusting third-party APIs without validation can introduce vulnerabilities (injection, data leaks). | ‚Ä¢ Validate and sanitize all data from third-party APIs<br>‚Ä¢ Apply strict timeouts and error handling<br>‚Ä¢ Evaluate third-party API security before integration |

> üìå *Use this table as a checklist when designing, implementing, or assessing API security controls.*
